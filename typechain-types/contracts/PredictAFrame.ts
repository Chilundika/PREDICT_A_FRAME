/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PredictAFrame {
  export type MarketEventStruct = {
    id: BigNumberish;
    description: string;
    endTime: BigNumberish;
    resolved: boolean;
    outcome: boolean;
    totalPool: BigNumberish;
    yesPool: BigNumberish;
    noPool: BigNumberish;
  };

  export type MarketEventStructOutput = [
    id: bigint,
    description: string,
    endTime: bigint,
    resolved: boolean,
    outcome: boolean,
    totalPool: bigint,
    yesPool: bigint,
    noPool: bigint
  ] & {
    id: bigint;
    description: string;
    endTime: bigint;
    resolved: boolean;
    outcome: boolean;
    totalPool: bigint;
    yesPool: bigint;
    noPool: bigint;
  };

  export type PredictionStruct = {
    id: BigNumberish;
    eventId: BigNumberish;
    user: AddressLike;
    amount: BigNumberish;
    outcome: boolean;
    claimed: boolean;
    timestamp: BigNumberish;
  };

  export type PredictionStructOutput = [
    id: bigint,
    eventId: bigint,
    user: string,
    amount: bigint,
    outcome: boolean,
    claimed: boolean,
    timestamp: bigint
  ] & {
    id: bigint;
    eventId: bigint;
    user: string;
    amount: bigint;
    outcome: boolean;
    claimed: boolean;
    timestamp: bigint;
  };
}

export interface PredictAFrameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PREDICTION_AMOUNT"
      | "MIN_PREDICTION_AMOUNT"
      | "PLATFORM_FEE_PERCENTAGE"
      | "addAllowedAddress"
      | "allowedAddresses"
      | "claimRewards"
      | "createMarketEvent"
      | "emergencyWithdraw"
      | "eventPredictions"
      | "getActiveEvents"
      | "getContractBalance"
      | "getEventPredictions"
      | "getMarketEvent"
      | "getPrediction"
      | "getUSDCAddress"
      | "getUserPredictions"
      | "makePrediction"
      | "marketEvents"
      | "nextEventId"
      | "nextPredictionId"
      | "owner"
      | "predictions"
      | "removeAllowedAddress"
      | "renounceOwnership"
      | "resolveMarketEvent"
      | "transferOwnership"
      | "usdcToken"
      | "userPredictions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MarketEventCreated"
      | "OwnershipTransferred"
      | "PredictionCreated"
      | "PredictionResolved"
      | "RewardsDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PREDICTION_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PREDICTION_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketEvent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventPredictions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEventPredictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrediction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDCAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPredictions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makePrediction",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEventId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPredictionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarketEvent",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userPredictions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PREDICTION_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PREDICTION_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPredictionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarketEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPredictions",
    data: BytesLike
  ): Result;
}

export namespace MarketEventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    description: string,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    description: string,
    endTime: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    description: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionCreatedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish,
    outcome: boolean
  ];
  export type OutputTuple = [
    predictionId: bigint,
    user: string,
    amount: bigint,
    outcome: boolean
  ];
  export interface OutputObject {
    predictionId: bigint;
    user: string;
    amount: bigint;
    outcome: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionResolvedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    outcome: boolean,
    totalRewards: BigNumberish
  ];
  export type OutputTuple = [
    predictionId: bigint,
    outcome: boolean,
    totalRewards: bigint
  ];
  export interface OutputObject {
    predictionId: bigint;
    outcome: boolean;
    totalRewards: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    predictionId: bigint,
    user: string,
    amount: bigint
  ];
  export interface OutputObject {
    predictionId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredictAFrame extends BaseContract {
  connect(runner?: ContractRunner | null): PredictAFrame;
  waitForDeployment(): Promise<this>;

  interface: PredictAFrameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PREDICTION_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MIN_PREDICTION_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  addAllowedAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  allowedAddresses: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  claimRewards: TypedContractMethod<
    [predictionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMarketEvent: TypedContractMethod<
    [description: string, durationHours: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  eventPredictions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getActiveEvents: TypedContractMethod<
    [],
    [PredictAFrame.MarketEventStructOutput[]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEventPredictions: TypedContractMethod<
    [eventId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getMarketEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [PredictAFrame.MarketEventStructOutput],
    "view"
  >;

  getPrediction: TypedContractMethod<
    [predictionId: BigNumberish],
    [PredictAFrame.PredictionStructOutput],
    "view"
  >;

  getUSDCAddress: TypedContractMethod<[], [string], "view">;

  getUserPredictions: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  makePrediction: TypedContractMethod<
    [eventId: BigNumberish, outcome: boolean, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  marketEvents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean, boolean, bigint, bigint, bigint] & {
        id: bigint;
        description: string;
        endTime: bigint;
        resolved: boolean;
        outcome: boolean;
        totalPool: bigint;
        yesPool: bigint;
        noPool: bigint;
      }
    ],
    "view"
  >;

  nextEventId: TypedContractMethod<[], [bigint], "view">;

  nextPredictionId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  predictions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, boolean, boolean, bigint] & {
        id: bigint;
        eventId: bigint;
        user: string;
        amount: bigint;
        outcome: boolean;
        claimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  removeAllowedAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveMarketEvent: TypedContractMethod<
    [eventId: BigNumberish, outcome: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  userPredictions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PREDICTION_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PREDICTION_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAllowedAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[predictionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createMarketEvent"
  ): TypedContractMethod<
    [description: string, durationHours: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eventPredictions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveEvents"
  ): TypedContractMethod<[], [PredictAFrame.MarketEventStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEventPredictions"
  ): TypedContractMethod<[eventId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMarketEvent"
  ): TypedContractMethod<
    [eventId: BigNumberish],
    [PredictAFrame.MarketEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrediction"
  ): TypedContractMethod<
    [predictionId: BigNumberish],
    [PredictAFrame.PredictionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUSDCAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserPredictions"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "makePrediction"
  ): TypedContractMethod<
    [eventId: BigNumberish, outcome: boolean, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketEvents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean, boolean, bigint, bigint, bigint] & {
        id: bigint;
        description: string;
        endTime: bigint;
        resolved: boolean;
        outcome: boolean;
        totalPool: bigint;
        yesPool: bigint;
        noPool: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextEventId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextPredictionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "predictions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, boolean, boolean, bigint] & {
        id: bigint;
        eventId: bigint;
        user: string;
        amount: bigint;
        outcome: boolean;
        claimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAllowedAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveMarketEvent"
  ): TypedContractMethod<
    [eventId: BigNumberish, outcome: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userPredictions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "MarketEventCreated"
  ): TypedContractEvent<
    MarketEventCreatedEvent.InputTuple,
    MarketEventCreatedEvent.OutputTuple,
    MarketEventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PredictionCreated"
  ): TypedContractEvent<
    PredictionCreatedEvent.InputTuple,
    PredictionCreatedEvent.OutputTuple,
    PredictionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionResolved"
  ): TypedContractEvent<
    PredictionResolvedEvent.InputTuple,
    PredictionResolvedEvent.OutputTuple,
    PredictionResolvedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;

  filters: {
    "MarketEventCreated(uint256,string,uint256)": TypedContractEvent<
      MarketEventCreatedEvent.InputTuple,
      MarketEventCreatedEvent.OutputTuple,
      MarketEventCreatedEvent.OutputObject
    >;
    MarketEventCreated: TypedContractEvent<
      MarketEventCreatedEvent.InputTuple,
      MarketEventCreatedEvent.OutputTuple,
      MarketEventCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PredictionCreated(uint256,address,uint256,bool)": TypedContractEvent<
      PredictionCreatedEvent.InputTuple,
      PredictionCreatedEvent.OutputTuple,
      PredictionCreatedEvent.OutputObject
    >;
    PredictionCreated: TypedContractEvent<
      PredictionCreatedEvent.InputTuple,
      PredictionCreatedEvent.OutputTuple,
      PredictionCreatedEvent.OutputObject
    >;

    "PredictionResolved(uint256,bool,uint256)": TypedContractEvent<
      PredictionResolvedEvent.InputTuple,
      PredictionResolvedEvent.OutputTuple,
      PredictionResolvedEvent.OutputObject
    >;
    PredictionResolved: TypedContractEvent<
      PredictionResolvedEvent.InputTuple,
      PredictionResolvedEvent.OutputTuple,
      PredictionResolvedEvent.OutputObject
    >;

    "RewardsDistributed(uint256,address,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
  };
}
